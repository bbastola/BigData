Total aggregation:
    reduce
    count
both are actions and returns one value

# Get revenue for given order_id
orderItems = sc.textFile("/public/retail_db/order_items/part-00000")
orderItemsFilter = orderItems.filter(lambda rec: int(rec.split(",")[1]) ==2)
orderItemsMap = orderItemsFilter.map(lambda rec: float(rec.split(",")[4]))

orderItemsTotal = orderItemsMap.reduce(lambda x,y: x+y)

another way to do add

from operator import add
orderItemsMap.reduce(add)
-------------------------------------------------
Get order item details which have minimum order_item_subtotal for give order_id
orderItems = sc.textFile("/public/retail_db/order_items/part-00000")
orderItemsFilter = orderItems.filter(lambda rec: int(rec.split(",")[1]) == 2)
orderItemsReduce = orderItemsFilter.reduce(lambda x,y: x if((float(x.split(",")[4])) < (float(y.split(",")[4]))) else y)




