union -> A u B
intersection --> A n B
Substract --> A - B OR B - A

//Prepare data for set operations - subsets of products for 2013-12 and 2014-01
orders = sc.textFile("/public/retail_db/orders")
orderItems = sc.textFile("/public/retail_db/order_items")

ordersFilter2013 = orders.filter(lambda rec: rec.split(",")[1][:7]=="2013-12").map(lambda rec: (int(rec.split(",")[0]), rec))
ordersFilter2014 = orders.filter(lambda rec: rec.split(",")[1][:7]=="2014-01").map(lambda rec: (int(rec.split(",")[0]), rec))

orderItemsMap = orderItems.map(lambda rec: (int(rec.split(",")[1]), rec))

orders2013Join = ordersFilter2013.join(orderItemsMap).map(lambda rec: rec[1][1])
orders2014Join = ordersFilter2014.join(orderItemsMap).map(lambda rec: rec[1][1])
for i in orders2014Join.take(10): print i

//Set Operations - Union - Get Products ids sold in 2013-12 and 2014-01

products2013 = orders2013Join.map(lambda p: int(p.split(",")[2]))
products2014 = orders2014Join.map(lambda p: int(p.split(",")[2]))

allProducts = products2013.union(products2014).distinct() 
>>> for i in allProducts.collect(): print i

//Set Operations - intersection - Get Product ids sold in both 2013-12 and 2014-01

soldProducts = products2013.intersection(products2014)
for i in soldProducts.collect(): print i

// Set OPerations - Minus - Get Product ids sold in 2013-12 but not in 2014-01

prod2013 = products2013.subtract(products2014).distinct()
for i in prod2013.collect(): print i
