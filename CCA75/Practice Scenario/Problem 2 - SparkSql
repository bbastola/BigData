Details - Duration 15 to 20 minutes

Data is available in local file system /home/cloudera/retail_db
Source directories: /home/cloudera/retail_db/orders and /home/cloudera/retail_db/customers
Source delimiter: comma (“,”)
Source Columns - orders - order_id, order_date, order_customer_id, order_status
Source Columns - customers - customer_id, customer_fname, customer_lname and many more

Get the customers who have not placed any orders, sorted by customer_lname and then customer_fname
Target Columns: customer_lname, customer_fname
Number of files - 1
Target Directory: /user/<YOUR_USER_ID>/solutions/solutions02/inactive_customers
Target File Format: TEXT
Target Delimiter: comma (“, ”)
Compression: N/A
Validation

SOLUTION:

orders = open("/home/cloudera/retail_db/orders/part-00000").read().splitlines()
ordersRDD = sc.parallelize(orders)
customers = open("/home/cloudera/retail_db/customers/part-00000").read().splitlines()
customersRDD = sc.parallelize(customers)

from pyspark.sql import Row
ordersDF = ordersRDD.map(lambda rec: Row(order_id=int(rec.split(",")[0]), order_customer_id=int(rec.split(",")[2]))).toDF()
ordersDF.registerTempTable("orders")
customersDF = customersRDD.map(lambda rec: Row(customer_id=int(rec.split(",")[0]), customer_lName=rec.split(",")[2], customer_fName=rec.split(",")[1] )).toDF()
customersDF.registerTempTable("customers")


customerNoOrder = sqlContext.sql("select c.customer_lName, c.customer_fName from \
customers c left outer join orders o on c.customer_id=o.order_customer_id \
where o.order_id is NULL \
order by c.customer_lName, c.customer_fName")

customerNoOrderMap = customerNoOrder.rdd.map(lambda rec: (str(rec[0]) + ", " + str(rec[1])))

customerNoOrderMap.saveAsTextFile("/user/cloudera/solutions/solutions02/inactive_customers_SQL")

for i in (sc.textFile("/user/cloudera/solutions/solutions02/inactive_customers_SQL").take(30)): print i