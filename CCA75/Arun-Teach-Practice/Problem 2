Problem 2:

Using sqoop copy data available in mysql products table to folder /user/cloudera/products on hdfs as text file. columns should be delimited by pipe '|'

move all the files from /user/bbastola/products folder to /user/bbastola/problem2/products folder

Change permissions of all the files under /user/cloudera/problem2/products such that owner has read,write and execute permissions, group has read and write permissions whereas others have just read and execute permissions

read data in /user/cloudera/problem2/products and do the following operations using a) spark sql b) RDDs aggregateByKey method. Your solution should have three sets of steps. Sort the resultant dataset by category id

filter such that your RDD\DF has products whose price is lesser than 100 USD

on the filtered data set find out the higest value in the product_price column under each category
on the filtered data set also find out total products under each category
on the filtered data set also find out the average price of the product under each category
on the filtered data set also find out the minimum price of the product under each category

store the result in avro file using snappy compression under these folders respectively

/user/cloudera/problem2/products/result-sql
/user/cloudera/problem2/products/result-rdd

solutions:

sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_db \
--username retail_user \
--password itversity \
--table products \
--target-dir /user/bbastola/products \
--fields-terminated-by '|'

hadoop fs -mkdir /user/bbastola/problem2
hadoop fs -cp /user/bbastola/products /user/bbastola/problem2/
hadoop fs -chmod 765 /user/bbastola/problem2/products

--Using sparkSql------------

pyspark --master yarn --packages com.databricks:spark-avro_2.10:2.0.1 

productsRDD = sc.textFile("/user/bbastola/problem2/products")
from pyspark.sql import Row
productsFilter = productsRDD.filter(lambda rec: float(rec.split("|")[4]) < 100)
productsDF = productsFilter.map(lambda rec: Row(Product_id=int(rec.split("|")[0]), Category_id=int(rec.split("|")[1]), Name=rec.split("|")[2], Price=float(rec.split("|")[4]))).toDF()
productsDF.registerTempTable("bbastola_products")

topProd = sqlContext.sql("select Category_id, max(Price) as Highest_price, count(Product_id) as Total_products, round(avg(price),2) as AVG_Price, min(price) as Minimum_Price from \
bbastola_products group by category_id \
order by Category_id")

sqlContext.setConf("spark.sql.avro.compression.codec","Snappy")
topProd.write.format("com.databricks.spark.avro").save("/user/bbastola/problem2/result-sql")







