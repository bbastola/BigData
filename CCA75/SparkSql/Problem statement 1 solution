pyspark --master yarn --conf spark.ui.port=12888 --num-executors 1 --executor-memory 2G 
sc.setLogLevel("ERROR")

ordersRDD = sc.textFile('/public/retail_db/orders')
orderItemsRDD = sc.textFile('/public/retail_db/order_items')
products = open('/data/retail_db/products/part-00000').read().splitlines()
productsRDD = sc.parallelize(products)

from pyspark.sql import Row

productsDF = productsRDD.map(lambda p: Row(product_id=int(p.split(",")[0]), product_category_id=int(p.split(",")[1]), product_name=p.split(",")[2], product_description=p.split(",")[3], product_price=float(p.split(",")[4]), product_image=p.split(",")[5])).toDF()


productsDF.registerTempTable("products")

sqlContext.sql("use bbastola_retail_db_txt")
sqlContext.sql("select * from orders limit 10").show()
sqlContext.sql("select * from order_items limit 10").show()
sqlContext.sql("select * from products limit 10").show()

//if you need just two task to run this small problem then
sqlContext.setConf("spark.sql.shuffle.partitions", "2")

sqlContext.sql("select o.order_date, p.product_name, round(sum(oi.order_item_subtotal), 2) total_revenue from \
orders o join order_items oi on o.order_id=oi.order_item_order_id \
join products p on p.product_id=oi.order_items_product_id \
where o.order_status in ('COMPLETE', 'CLOSED') \
group by o.order_date, p.product_name \
order by o.order_date, total_revenue desc")


sqlContext.sql("create database bbastola_daily_revenue")
sqlContext.sql("create table bbastola_daily_revenue.daily_revenue(order_date string, product_name string, daily_revenue_per_product float) STORED AS orc")

daily_revenue_per_product_DF = sqlContext.sql("select o.order_date, p.product_name, round(sum(oi.order_item_subtotal), 2) total_revenue from \
orders o join order_items oi on o.order_id=oi.order_item_order_id \
join products p on p.product_id=oi.order_items_product_id \
where o.order_status in ('COMPLETE', 'CLOSED') \
group by o.order_date, p.product_name \
order by o.order_date, total_revenue desc")

daily_revenue_per_product_DF.write.insertInto("bbastola_daily_revenue.daily_revenue")